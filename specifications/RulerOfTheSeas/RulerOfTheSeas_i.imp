IMPLEMENTATION RulerOfTheSeas_i

REFINES RulerOfTheSeas

CONCRETE_VARIABLES
    players_i, player_coins_i, player_islands_i,
    available_islands_i, turn_completed_i, game_state_i,
    island_happiness_i, winner_i, player_count,
    available_islands_count, turn_completed_count

INVARIANT
    players_i : PLAYER --> BOOL &
    players = dom(players_i |> {TRUE}) &
    
    player_count : NAT &
    player_count <= MAX_PLAYERS &
    
    player_coins_i : PLAYER --> NAT &
    player_coins = players <| player_coins_i & 
    
    player_islands_i : PLAYER * ISLAND --> BOOL &
    player_islands = %pp.(pp:players | { ii | ii:ISLAND & player_islands_i(pp,ii)=TRUE }) &

    island_happiness_i : ISLAND --> (0..MAX_HAPPINESS) &
    island_happiness = island_happiness_i &

    available_islands_i : ISLAND --> BOOL &
    available_islands = dom(available_islands_i |> {TRUE}) &
    available_islands_count : NAT &
    available_islands_count <= MAX_ISLANDS &
    
    game_state_i : GAME_STATE &
    game_state = game_state_i &
    
    turn_completed_i : PLAYER --> BOOL &
    turn_completed = dom(turn_completed_i |> {TRUE}) &
    turn_completed_count : NAT &
    turn_completed_count <= player_count &

    winner_i : PLAYER --> BOOL &
    winner = dom(winner_i |> {TRUE})

VALUES
    PLAYER = 0..3;
    ISLAND = 0..11;
    MAX_ISLANDS = 12;
    MAX_PLAYERS = 4; 
    MIN_PLAYERS = 2;
    MAX_HAPPINESS = 100;
    HAPPINESS_FEE = 20;
    ISLAND_HAPPINESS_ACQUIRED = 50;
    ATTACK_SUCCESS_HAPPINESS = 80;
    ATTACK_FAIL_HAPPINESS = 20

INITIALISATION
    players_i := PLAYER * {FALSE};
    player_count := 0;
    turn_completed_count := 0;
    island_happiness_i := ISLAND * {MAX_HAPPINESS};
    player_coins_i := PLAYER * {0};
    available_islands_i := ISLAND * {TRUE};
    available_islands_count := MAX_ISLANDS;
    turn_completed_i := PLAYER * {FALSE};
    player_islands_i := PLAYER * ISLAND * {FALSE};
    game_state_i := CONFIGURING;
    winner_i := PLAYER * {FALSE}

OPERATIONS
    AddPlayer(pp) =
        BEGIN
            VAR is_player_in IN
                is_player_in := players_i(pp);
                IF player_count < MAX_PLAYERS & is_player_in = FALSE & game_state_i = CONFIGURING
                THEN
                    players_i(pp) := TRUE;
                    player_coins_i(pp) := 2;
                    player_count := player_count + 1;
                    VAR ii_index, found IN
                        ii_index := 0;
                        found := FALSE;
                        WHILE ii_index <= MAX_ISLANDS & found = FALSE DO
                            VAR is_available_island IN
                                is_available_island := available_islands_i(ii_index);
                                IF is_available_island = TRUE THEN
                                    player_islands_i(pp, ii_index) := TRUE;
                                    available_islands_i(ii_index) := FALSE;
                                    found := TRUE
                                ELSE
                                    ii_index := ii_index + 1
                                END
                             END
                        INVARIANT
                            ii_index : 0..MAX_ISLANDS  &
                            available_islands_i(ii_index) = TRUE &
                            found = FALSE => player_islands_i(pp, ii_index) = FALSE
                        VARIANT
                            MAX_ISLANDS - ii_index + 1
                        END
                    END 
                END
             END
        END;
        
    StartGame = 
        BEGIN
            IF player_count >= MIN_PLAYERS & player_count <= MAX_PLAYERS & game_state_i = CONFIGURING
            THEN
                game_state_i := PLAYING
            END   
        END;
    
    AcquireIsland(pp) =
        BEGIN
            VAR player_turn_not_completed, player_current_coins IN
                player_turn_not_completed := turn_completed_i(pp);
                player_current_coins := player_coins_i(pp);
                IF player_turn_not_completed = FALSE & available_islands_count > 0 & player_current_coins >= 3 & game_state_i = PLAYING
                THEN
                    player_coins_i(pp) := player_coins_i(pp) - 3;
                    VAR ii_index, found IN
                        ii_index := 0;
                        found := FALSE;
                        WHILE ii_index <= MAX_ISLANDS & found = FALSE DO
                            VAR is_available_island IN
                                is_available_island := available_islands_i(ii_index);
                                IF is_available_island = TRUE THEN
                                    player_islands_i(pp, ii_index) := TRUE;
                                    available_islands_i(ii_index) := FALSE;
                                    island_happiness_i(ii_index) := ISLAND_HAPPINESS_ACQUIRED;
                                    found := TRUE
                                ELSE
                                    ii_index := ii_index + 1
                                END
                            END
                        INVARIANT
                            ii_index : 0..MAX_ISLANDS  &
                            available_islands_i(ii_index) = TRUE &
                            found = FALSE => player_islands_i(pp, ii_index) = FALSE
                        VARIANT
                            MAX_ISLANDS - ii_index + 1
                        END
                    END;
                    turn_completed_i(pp) := TRUE;
                    turn_completed_count := turn_completed_count + 1
                END
            END
        END;
    
    InvestOnResources(pp) =
        BEGIN
            VAR player_turn_not_completed IN
                player_turn_not_completed := turn_completed_i(pp);
                IF player_turn_not_completed = FALSE & game_state_i = PLAYING
                THEN
                    VAR ii IN
                        ii := 0;
                        WHILE ii < MAX_ISLANDS DO
                            VAR is_player_island IN
                                is_player_island := player_islands_i(pp, ii);
                                IF is_player_island = TRUE
                                THEN
                                    player_coins_i(pp) := player_coins_i(pp) + 1;
                                    VAR island_happiness_value, happiness_minus_fee IN
                                        island_happiness_value := island_happiness_i(ii);
                                        happiness_minus_fee := island_happiness_value - HAPPINESS_FEE;
                                        IF happiness_minus_fee <= 0
                                        THEN
                                            player_islands_i(pp, ii) := FALSE;
                                            available_islands_i(ii) := TRUE
                                        ELSE
                                            island_happiness_i(ii) := happiness_minus_fee
                                        END
                                    END
                                END;
                                ii := ii + 1
                            END
                        INVARIANT
                            ii : NAT & ii <= MAX_ISLANDS &
                            pp : PLAYER & ii : 1..MAX_ISLANDS &
                            { pi | pi : 1..MAX_ISLANDS & player_islands_i(pp, pi) = TRUE } = player_islands(pp)
                        VARIANT
                            MAX_ISLANDS - ii
                        END
                    END;
                    turn_completed_i(pp) := TRUE;
                    turn_completed_count := turn_completed_count + 1
                END
            END
        END;

    InvestOnHappiness(pp) =
        BEGIN
            VAR player_turn_not_completed, pi_counter, p_coins, ii IN
                player_turn_not_completed := turn_completed_i(pp);
                p_coins := player_coins_i(pp);
                ii := 0;
                pi_counter := 0;
                WHILE ii < MAX_ISLANDS DO
                    VAR is_player_island IN
                        is_player_island := player_islands_i(pp, ii);
                        IF is_player_island = TRUE
                        THEN
                            pi_counter := pi_counter + 1
                        END;
                        ii := ii + 1
                    END
                INVARIANT
                    0 <= ii & ii <= MAX_ISLANDS &
                    pi_counter >= 0
                VARIANT
                    MAX_ISLANDS - ii
                END;
                IF player_turn_not_completed = FALSE & game_state_i = PLAYING & p_coins >= pi_counter
                THEN
                    VAR iii IN
                        iii := 0;
                        WHILE iii < MAX_ISLANDS DO
                            VAR is_player_island IN
                                is_player_island := player_islands_i(pp, iii);
                                IF is_player_island = TRUE
                                THEN
                                    player_coins_i(pp) := player_coins_i(pp) + 1;
                                    VAR island_happiness_value, happiness_plus_fee IN
                                        island_happiness_value := island_happiness_i(iii);
                                        happiness_plus_fee := island_happiness_value + HAPPINESS_FEE;
                                        IF happiness_plus_fee > 100
                                        THEN
                                            island_happiness_i(iii) := MAX_HAPPINESS
                                        ELSE
                                            island_happiness_i(iii) := happiness_plus_fee
                                        END
                                    END
                                END;
                                iii := iii + 1
                            END
                        INVARIANT
                            iii : NAT & iii <= MAX_ISLANDS &
                            pp : PLAYER & iii : 1..MAX_ISLANDS &
                            { pi | pi : 1..MAX_ISLANDS & player_islands_i(pp, pi) = TRUE } = player_islands(pp)
                        VARIANT
                            MAX_ISLANDS - iii
                        END
                    END;
                    turn_completed_i(pp) := TRUE;
                    turn_completed_count := turn_completed_count + 1
                END
            END
        END;

    AttackPlayer(attacker, victim, dice_attacker, dice_victim) =
        BEGIN
            VAR attacker_happiness, victim_happiness, attacker_coins, attacker_islands_count, victim_islands_count, last_found_island_attacker, last_found_island_victim IN
                attacker_happiness := 0;
                victim_happiness := 0;
                attacker_coins := player_coins_i(attacker);
                attacker_islands_count := 0;
                victim_islands_count := 0;
                last_found_island_attacker := -1;
                last_found_island_victim := -1;
                IF attacker /= victim & attacker_coins >= 4 & game_state_i = PLAYING THEN
                    player_coins_i(attacker) := attacker_coins - 4;
                    VAR island_index IN
                        island_index := 0;
                        WHILE island_index < MAX_ISLANDS DO
                            VAR is_attacker_island, is_victim_island IN
                                is_attacker_island := player_islands_i(attacker, island_index);
                                is_victim_island := player_islands_i(victim, island_index);
                                IF is_attacker_island = TRUE THEN
                                    attacker_happiness := attacker_happiness + island_happiness_i(island_index);
                                    attacker_islands_count := attacker_islands_count + 1;
                                    last_found_island_attacker := island_index
                                ELSIF is_victim_island = TRUE THEN
                                    victim_happiness := victim_happiness + island_happiness_i(island_index);
                                    victim_islands_count := victim_islands_count + 1;
                                    last_found_island_victim := island_index
                                END;
                                island_index := island_index + 1
                            END
                            INVARIANT
                                0 <= island_index & island_index <= MAX_ISLANDS &
                                (attacker_islands_count > 0 => 0 <= last_found_island_attacker & last_found_island_attacker < MAX_ISLANDS) &
                                (victim_islands_count > 0 => 0 <= last_found_island_victim & last_found_island_victim < MAX_ISLANDS) &
                                attacker_happiness >= 0 &
                                victim_happiness >= 0
                            VARIANT
                                MAX_ISLANDS - island_index
                        END;
                        IF attacker_islands_count > victim_islands_count THEN
                            IF attacker_happiness <= victim_happiness THEN
                                IF last_found_island_victim /= -1 THEN
                                    island_happiness_i(last_found_island_victim) := ATTACK_FAIL_HAPPINESS
                                END
                            ELSE
                                IF last_found_island_attacker /= -1 THEN
                                    island_happiness_i(last_found_island_attacker) := ATTACK_SUCCESS_HAPPINESS
                                END
                            END;
                            IF last_found_island_victim /= -1 THEN
                                player_islands_i(victim, last_found_island_victim) := FALSE;
                                player_islands_i(attacker, last_found_island_victim) := TRUE
                            END
                        ELSE
                            IF dice_attacker > dice_victim THEN
                                IF last_found_island_victim /= -1 THEN
                                    island_happiness_i(last_found_island_victim) := ISLAND_HAPPINESS_ACQUIRED;
                                    player_islands_i(attacker, last_found_island_victim) := TRUE;
                                    player_islands_i(victim, last_found_island_victim) := FALSE
                                END
                            ELSE
                                IF last_found_island_attacker /= -1 THEN
                                    island_happiness_i(last_found_island_attacker) := ISLAND_HAPPINESS_ACQUIRED;
                                    player_islands_i(attacker, last_found_island_attacker) := FALSE;
                                    player_islands_i(victim, last_found_island_attacker) := TRUE
                                END
                            END
                        END
                    END
                END
            END
        END;
    
    NextTurn =
        BEGIN
            IF game_state_i = PLAYING & player_count = turn_completed_count
            THEN
                VAR pp IN
                    pp := 0;
                    WHILE pp < MAX_PLAYERS DO
                        VAR ii, player_island_counter IN
                            ii := 0;
                            player_island_counter := 0;
                            WHILE ii < MAX_ISLANDS DO
                                VAR is_player_island IN
                                    is_player_island := player_islands_i(pp, ii);
                                    IF is_player_island = TRUE
                                    THEN
                                        VAR island_happiness_value IN
                                            island_happiness_value := island_happiness_i(ii);
                                            IF island_happiness_value <= 0
                                            THEN
                                                player_islands_i(pp, ii) := FALSE;
                                                available_islands_i(ii) := TRUE
                                            ELSE
                                                player_island_counter := player_island_counter + 1
                                            END
                                        END
                                    END;
                                    ii := ii + 1
                                END
                            INVARIANT
                                0 <= ii & ii <= MAX_ISLANDS &
                                player_island_counter >= 0 &
                                island_happiness_i(ii) >= 0
                            VARIANT
                                MAX_ISLANDS - ii
                            END;
                            IF player_island_counter = 0
                            THEN
                                players_i(pp) := FALSE;
                                player_count := player_count - 1
                            END;
                            IF player_count = 1 & player_island_counter > 0
                            THEN
                                winner_i(pp) := TRUE;
                                game_state_i := FINISHED
                            END
                        END
                    INVARIANT
                        0 <= pp & pp <= MAX_PLAYERS &
                        player_count >= 1 &
                        game_state_i = PLAYING
                    VARIANT
                        MAX_PLAYERS - pp
                    END
                END            
            END 
        END;

    StartNewGame =
        BEGIN
            IF game_state_i = FINISHED
            THEN
                players_i := PLAYER * {FALSE};
                player_count := 0;
                turn_completed_count := 0;
                island_happiness_i := ISLAND * {MAX_HAPPINESS};
                player_coins_i := PLAYER * {0};
                available_islands_i := ISLAND * {TRUE};
                available_islands_count := MAX_ISLANDS;
                turn_completed_i := PLAYER * {FALSE};
                player_islands_i := PLAYER * ISLAND * {FALSE};
                game_state_i := CONFIGURING;
                winner_i := PLAYER * {FALSE}
            END
        END
END