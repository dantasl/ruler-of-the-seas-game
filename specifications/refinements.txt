Abstract: players <: PLAYER
Refinement: Since the number of players is between 2 and 4, we can represent players as an array of player IDs with fixed maximum size that maps into a boolean (they're either playing the game or not).
Concrete Type: players : 0..(MAX_PLAYERS - 1) → BOOLEAN
Status: Refined

Abstract: player_coins : players → NAT
Refinement: Since players is now a array, player_coins can be an array where each index corresponds to a player in players.
Concrete Type: player_coins : 0..(MAX_PLAYERS-1) → NAT
Status: Refined

Abstract: player_islands : players → POW(ISLAND)
Refinement: Represent player_islands as an array of arrays, where each player islands are stored in a array.
Concrete Type: player_islands : (0..(MAX_PLAYERS-1)) * (0..(MAX_ISLANDS-1)) → BOOLEAN

Concrete Type 2: ISLAND --> PLAYER  // needs a dummy player - when the island is owned by no one - and it needs to be added


Abstract: available_islands <: ISLAND
Refinement: Represent available_islands as a sequence of island IDs.
Concrete Type: available_islands : 0..(MAX_ISLANDS-1) → BOOLEAN


Abstract: island_happiness : ISLAND → (0..MAX_HAPPINESS)
Refinement: Represent island_happiness as an array where the index corresponds to the island ID.
Concrete Type: island_happiness : ISLAND → 0..MAX_HAPPINESS
ran(island_happiness) <: 0..MAX_HAPPINESS

Abstract: turn_completed <: players
Refinement: Use a boolean array indicating whether each player has completed their turn.
Concrete Type: turn_completed : 0..(MAX_PLAYERS-1) → BOOL


Abstract: game_state : GAME_STATE
Refinement: Remain unchanged, can be represented as an enumeration or integer.
Status: Refined


Abstract: winner <: PLAYER with cardinality ≤ 1
Refinement: Represent winner as an optional player ID (or null/undefined if no winner).
Concrete Type: winner : PLAYER \/ {null}
Status: Defining dummy player approach still